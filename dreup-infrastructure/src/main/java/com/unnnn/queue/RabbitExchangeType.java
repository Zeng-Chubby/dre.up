package com.unnnn.queue;

/**
 * Rabbit 交换类型。
 */
public enum RabbitExchangeType {
    /**
     * 默认交换。
     * 处理路由键。需要将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配。这是一个完整的匹配。
     * 如果一个队列绑定到该交换机上要求路由键 “dog”，则只有被标记为“dog”的消息才被转发，不会转发dog.puppy，也不会转发dog.guard，只会转发dog。
     */
    Direct,
    /**
     * 不处理路由键。你只需要简单的将队列绑定到交换机上。
     * 一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。Fanout交换机转发消息是最快的。
     */
    Fanout,
    /**
     * 将路由键和某模式进行匹配。此时队列需要绑定要一个模式上。
     * 符号“#”匹配一个或多个词，符号 “*” 匹配不多不少一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.*” 只会匹配到“audit.irs”。
     */
    Topic,
    /**
     * 标题交换设计用于在多个属性上进行路由，这些属性比路由密钥更容易表示为消息头。标题交换忽略路由密钥属性。相反，用于路由的属性取自headers属性。如果头的值等于绑定时指定的值，则认为消息被匹配。
     * 可以使用多个标头将队列绑定到标头交换机进行匹配。在这种情况下，代理商需要来自应用程序开发人员的另一条信息，即是否应考虑与任何标题匹配的消息，还是全部？这就是“x-match”绑定参数。当“x-match”参数设置为“any”时，只有一个匹配的头值就足够了。或者，将“x-match”设置为“all”要求所有值必须匹配。
     * 头衔交流可以看作是“类固醇的直接交流”。因为它们基于头值路由，它们可以用作直接交换，其中路由密钥不必是字符串;例如，它可以是整数或散列（字典）。
     */
    Headers
}
